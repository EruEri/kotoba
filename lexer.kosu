external isspace(c: s32) s32;
external isnumber(c: s32) s32;

struct lexer {
    char: Option.option(u8),
    chars: String.string,
    index: u64,
    line: u32,
    column: u32
}

enum token {
    lbrack,
    rbrack,
    lsquare,
    rsquare,
    colon,
    comma,
    jtnull,
    jttrue,
    jtfalse,
    jtstring(String.string),
    number(String.string),
    eof
}

fn show_token(t: token) = switch (t) {
    .lbrack => { 
        discard Sys.write(1, @stringlptr("{"), 1u64);
        $ empty
    }
    .rbrack => {
        discard Cstd::Io.printf_s("}");
        $ empty
    }
    .lsquare => {
        discard Cstd::Io.printf_s("[");
        $ empty
    }
    .rsquare => {
        discard Cstd::Io.printf_s("]");
        $ empty
    }
    .colon => {
        discard Sys.write(1, @stringlptr(":"), 1u64);        
        $ empty
    }
    .comma => {
        discard Sys.write(1, @stringlptr(",\n"), 2u64);
        $ empty
    }
    .jtnull => {
        discard Sys.write(1, @stringlptr("null"), 4u64);
        $ empty
    }
    .jttrue => {
        discard Sys.write(1, @stringlptr("true"), 4u64);
        $ empty
    }
    .jtfalse => {
        discard Sys.write(1, @stringlptr("false"), 5u64);
        $ empty
    }
    .jtstring(s) | .number(s) => {
        discard Sys.write(1, @stringlptr("\""), 1u64);
        discard String.show(s);
        discard Sys.write(1, @stringlptr("\""), 1u64);
        $ empty
    }
    .eof => {
        discard Cstd::Io.printf_s("eof");
        $ empty
    }
}

fn new(source: String.string) lexer {
    const char = String.get_opt(source, 0u64);
    $ lexer {
        char = char,
        chars = source,
        index = 0u64,
        line = 1u32,
        column = 1u32
    }
}

fn abort<t>(code: s32) t {
    const c = Sys.exit(code);
    const null : *t = nullptr;
    $ *null
}

fn is_whitespace(u: u8) bool = isspace(@tos32(u)) != 0

fn is_number(u: u8) bool = isnumber(@tos32(u)) != 0

fn is_new_line(u: u8) bool = u == @tou8('\n')

fn is_quote(c: u8) bool = c == @tou8('\"')

fn is_first_char_digit(s: String.string) bool = switch ( String.get_opt(s, 0u64) ) {
    .none => { $ false }
    .some(c) => {
        $ is_number(c)
    }
}
 
fn char_at(l: *lexer, i: u64) Option.option(u8) {
    $ (*l).chars |> String.get_opt(i)
}

fn current_char(l: *lexer) Option.option(u8) = (*l).char

fn advance(l: *lexer) {
    var dl = *l;
    *l.index = dl.index + 1u64;
    *l.column = dl.column + 1u32;
    *l.char = Lexer.char_at(l, (*l).index);
    $ empty
}

fn next_line(l: *lexer) {
    var dl = *l;
    *l.index = dl.index + 1u64;
    *l.column = 1u32;
    *l.line = dl.line + 1u32;
    *l.char = Lexer.char_at(l, (*l).index);
    $ empty
}



fn skip_whitespace(l: *lexer) =
    switch ( current_char(l) ) {
        .none => { $ empty }
        .some(c) => {
            $ cases {
                of is_new_line(c) => { discard next_line(l); $ skip_whitespace(l) }
                of is_whitespace(c) => { discard advance(l); $ skip_whitespace(l) }
                else { $ empty }
            }
        }
    }



fn parse_string(lexer: *lexer) Option.option(String.string) {
    const content = String.new();
    var continue = true;
    var eof_encontered = false;
    discard while (continue) {
        discard advance( lexer );
        discard switch ( current_char(lexer) ) {
            .none => { continue = false; eof_encontered = true; $ empty }
            .some(c) => {
                $ cases {
                    of c == @tou8('\"') => {
                        continue = false;
                        $ empty
                    }
                    of c == @tou8('\\') => {
                        discard String.push_u8(&content, c);
                        discard lexer |> advance();
                        $ switch ( current_char(lexer) ) {
                            .none => { 
                                continue = false;
                                $ empty
                            }
                            .some(ic) => {
                                $ String.push_u8(&content, ic)
                            } 
                        }
                    }
                    else {
                        $ String.push_u8(&content, c)
                    }
                }
            }
        };
        
        $ empty
    }; 
    $ if (eof_encontered) {
        $ Option..none
    } else {
        $ Option..some(content)
    }
}

// fc: first-char
fn parse_until_whitespace(lexer: *lexer, fc: u8) String.string {
    const s = String.new();
    discard String.push_u8(&s, fc);
    var continue = true;
    discard while(continue) {
        discard advance( lexer );
        discard switch ( current_char(lexer) ) {
            .none => { continue = false; $ empty }
            .some(c) => {
                $ if (is_whitespace(c)) { continue = false; $ empty }
                else {
                    discard String.push_u8(&s, c);
                    $ empty
                }
            } 
        };
        $ empty
    };    
    $ s

}

fn next_token(lexer: *lexer) Option.option(token) = switch ( current_char(lexer) ) {
    .none => { $ Option..none }
    .some(c) => {
        $ cases {
            of is_whitespace(c) => {
                discard skip_whitespace(lexer);
                $ next_token(lexer)
            }
            of c == @tou8('{') => { $ Option..some(.lbrack) }
            of c == @tou8('}') => { $ Option..some(.rbrack) }
            of c == @tou8('[') => { $ Option..some(.lsquare) }
            of c == @tou8(']') => { $ Option..some(.rsquare) }
            of c == @tou8(',') => { $ Option..some(.comma) }
            of c == @tou8(':') => { $ Option..some(.colon) }
            of c == @tou8('\"') => { 
                const parsed = parse_string(lexer);
                $ switch (parsed) {
                    .none => { $ Option..none }
                    .some(s) => { $ Option..some(.jtstring(s)) }
                }
            }
            else {
                const parsed = parse_until_whitespace(lexer, c);
                $ cases {
                    of String.eq_stringl(parsed, "null") => {
                        $ Option..some(.jtnull)
                    }
                    of String.eq_stringl(parsed, "true") => {
                        $ Option..some(.jttrue)
                    }
                    of String.eq_stringl(parsed, "false") => {
                        $ Option..some(.jtfalse)
                    }
                    of is_first_char_digit(parsed) => {
                        $ Option..some(.number(parsed) )
                    }
                    else {
                        $ Option..none
                    }
                }
            }
        }
    }
}
fn is_eof(token: token) bool = switch (token) {
    .eof => { $ true }
    _ => { $ false }
}

// fn parse(lexer: *lexer) Option.option(Json.json) {
//     var continue = true;
//     var error = false;
//     var json = parse_aux(lexer);
//     var current = Lexer.next_token(lexer);
//     $ switch ( current ){
//         .none => { $ Option..none }
//         .some(token) => {
//             $ if ( is_eof(token) ) {
//                 $ json 
//             } else {
//                 $ Option..none
//             }
//         }
//     }
// }
// 
// fn value_aux(lexer: *lexer, token: Option.option(token)) Option.option(Json.json) = 
//     switch (token) {
//         .eof | .rbrack | .rsquare | .colon | .comma => {
//             $ Option..none
//         }
//         .lbrack => {
//                         
//         }
//         .lsquare,
//         .jtnull,
//         .jttrue,
//         .jtfalse,
//         .jtstring(String.string),
//         .number(String.string),
//         
//     }
// 
// fn value(lexer: *lexer) Option.option(Json.json) {
//     const current = next_token( lexer );
//     $ switch ( current ) {
//         .none => { $ Option..none }
//         .some(token) => {
//             $ switch (token) {
//                 .eof | .rbrack | .rsquare | .colon | .comma => {
//                     $ Option..none
//                 }
//                 .lbrack => {
//                         
//                 }
//                 .lsquare,
//                 .jtnull,
//                 .jttrue,
//                 .jtfalse,
//                 .jtstring(String.string),
//                 .number(String.string),
//                     
//             }
//         }
//     }
// }